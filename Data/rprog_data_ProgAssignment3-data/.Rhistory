mySubset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure = as.numeric(mySubset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
## order subset based on rankings and alphabetically
mySubset = mySubset[order(mySubset[,17], mySubset[,2]),]
## select State, Hospital name, rate and rankings
mySubset = mySubset[,c(7,2,17)]
## get the last hospital name
my.hospital.name = mySubset$Hospital.Name[nrow(mySubset)]
}
} else if(class(num) == "numeric"){
## subset the data based on state while removing the NAs
mySubset = subset(data, data[,17]!="Not Available" & data[,7] == state)
##convert Rates from Heart failure column to numeric
mySubset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure = as.numeric(mySubset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
## order subset based on rankings and alphabetically
mySubset = mySubset[order(mySubset[,17], mySubset[,2]),]
## select State, Hospital name, rate and rankings
mySubset = mySubset[,c(7,2,17)]
## get the hospital name based on user input
my.hospital.name = mySubset$Hospital.Name[num]
}
}
## else if outcome is "pneumonia"
else if ("pneumonia" == "pneumonia"){
if(class(num) == "character"){
if(num == "best"){
## subset the data based on state while removing the NAs
mySubset = subset(data, data[,23]!="Not Available" & data[,7] == state)
##convert Rates from pneumonia column to numeric
mySubset$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia = as.numeric(mySubset$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
## order subset based on rankings and alphabetically
mySubset = mySubset[order(mySubset[,23], mySubset[,2]),]
## select State, Hospital name, rate and rankings
mySubset = mySubset[,c(7,2,23)]
## get the first hospital name
my.hospital.name = mySubset$Hospital.Name[1]
} else {
## subset the data based on state while removing the NAs
mySubset = subset(data, data[,23]!="Not Available" & data[,7] == state)
##convert Rates from pneumonia column to numeric
mySubset$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia = as.numeric(mySubset$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
## order subset based on rankings and alphabetically
mySubset = mySubset[order(mySubset[,23], mySubset[,2]),]
## select State, Hospital name, rate and rankings
mySubset = mySubset[,c(7,2,23)]
## get the last hospital name
my.hospital.name = mySubset$Hospital.Name[nrow(mySubset)]
}
} else if(class(num) == "numeric"){
## subset the data based on state while removing the NAs
mySubset = subset(data, data[,23]!="Not Available" & data[,7] == state)
##convert Rates from pneumonia column to numeric
mySubset$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia = as.numeric(mySubset$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
## order subset based on rankings and alphabetically
mySubset = mySubset[order(mySubset[,23], mySubset[,2]),]
## select State, Hospital name, rate and rankings
mySubset = mySubset[,c(7,2,23)]
## get the hospital name based on user input
my.hospital.name = mySubset$Hospital.Name[num]
}
}
my.hospital.name
}
rankhospital("MN", "heart attack",5000)
rankhospital("tx", "heart failure",4)
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data = read.csv("outcome-of-care-measures.csv", colClasses = "character")
##change case to make sure state comes in upper case
state = toupper(state)
##change case to make sure state comes in upper case
outcome = tolower(outcome)
## create a vector of valid outcomes
valid.outcomes = c("heart attack", "heart failure", "pneumonia")
## create a vector of valid rankings
valid.rankings = c("best", "worst")
## Check that if state, rankings and outcome are valid
if(!(state %in% data$State)){
stop("invalid state")
} else
if(!(outcome %in% valid.outcomes)){
stop("invalid outcome")
} else
if(!(class(num) == "numeric" | num %in% valid.rankings)){
stop("The ranking can be either a number, best or worst catagory only!")
}
## intialise hospital name to return
my.hospital.name = NULL
## Return hospital name in that state with lowest 30-day death
## rate
## check if outcome is "heart attack"
if(outcome == "heart attack"){
if(class(num) == "character"){
if(num == "best"){
## subset the data based on state while removing the NAs
mySubset = subset(data, data[,11]!="Not Available" & data[,7] == state)
##convert Rates from Heart attack column to numeric
mySubset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack = as.numeric(mySubset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
## order subset based on rankings and alphabetically
mySubset = mySubset[order(mySubset[,11], mySubset[,2]),]
## select State, Hospital name, rate and rankings
mySubset = mySubset[,c(7,2,11)]
## get the first hospital name
my.hospital.name = mySubset$Hospital.Name[1]
} else {
## subset the data based on state while removing the NAs
mySubset = subset(data, data[,11]!="Not Available" & data[,7] == state)
##convert Rates from Heart attack column to numeric
mySubset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack = as.numeric(mySubset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
## order subset based on rankings and alphabetically
mySubset = mySubset[order(mySubset[,11], mySubset[,2]),]
## select State, Hospital name, rate and rankings
mySubset = mySubset[,c(7,2,11)]
## get the first hospital name
my.hospital.name = mySubset$Hospital.Name[nrow(mySubset)]
}
} else if(class(num) == "numeric"){
## subset the data based on state while removing the NAs
mySubset = subset(data, data[,11]!="Not Available" & data[,7] == state)
##convert Rates from Heart attack column to numeric
mySubset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack = as.numeric(mySubset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
## order subset based on rankings and alphabetically
mySubset = mySubset[order(mySubset[,11], mySubset[,2]),]
## select State, Hospital name, rate and rankings
mySubset = mySubset[,c(7,2,11)]
## get the index based on user input
my.hospital.name = mySubset$Hospital.Name[num]
}
}
## else if outcome is "heart failure"
else if (outcome == "heart failure"){
if(class(num) == "character"){
if(num == "best"){
## subset the data based on state while removing the NAs
mySubset = subset(data, data[,17]!="Not Available" & data[,7] == state)
##convert Rates from Heart failure column to numeric
mySubset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure = as.numeric(mySubset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
## order subset based on rankings and alphabetically
mySubset = mySubset[order(mySubset[,17], mySubset[,2]),]
## select State, Hospital name, rate and rankings
mySubset = mySubset[,c(7,2,17)]
## get the first hospital name
my.hospital.name = mySubset$Hospital.Name[1]
} else {
## subset the data based on state while removing the NAs
mySubset = subset(data, data[,17]!="Not Available" & data[,7] == state)
##convert Rates from Heart failure column to numeric
mySubset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure = as.numeric(mySubset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
## order subset based on rankings and alphabetically
mySubset = mySubset[order(mySubset[,17], mySubset[,2]),]
## select State, Hospital name, rate and rankings
mySubset = mySubset[,c(7,2,17)]
## get the last hospital name
my.hospital.name = mySubset$Hospital.Name[nrow(mySubset)]
}
} else if(class(num) == "numeric"){
## subset the data based on state while removing the NAs
mySubset = subset(data, data[,17]!="Not Available" & data[,7] == state)
##convert Rates from Heart failure column to numeric
mySubset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure = as.numeric(mySubset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
## order subset based on rankings and alphabetically
mySubset = mySubset[order(mySubset[,17], mySubset[,2]),]
## select State, Hospital name, rate and rankings
mySubset = mySubset[,c(7,2,17)]
## get the hospital name based on user input
my.hospital.name = mySubset$Hospital.Name[num]
}
}
## else if outcome is "pneumonia"
else if ("pneumonia" == "pneumonia"){
if(class(num) == "character"){
if(num == "best"){
## subset the data based on state while removing the NAs
mySubset = subset(data, data[,23]!="Not Available" & data[,7] == state)
##convert Rates from pneumonia column to numeric
mySubset$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia = as.numeric(mySubset$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
## order subset based on rankings and alphabetically
mySubset = mySubset[order(mySubset[,23], mySubset[,2]),]
## select State, Hospital name, rate and rankings
mySubset = mySubset[,c(7,2,23)]
## get the first hospital name
my.hospital.name = mySubset$Hospital.Name[1]
} else {
## subset the data based on state while removing the NAs
mySubset = subset(data, data[,23]!="Not Available" & data[,7] == state)
##convert Rates from pneumonia column to numeric
mySubset$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia = as.numeric(mySubset$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
## order subset based on rankings and alphabetically
mySubset = mySubset[order(mySubset[,23], mySubset[,2]),]
## select State, Hospital name, rate and rankings
mySubset = mySubset[,c(7,2,23)]
## get the last hospital name
my.hospital.name = mySubset$Hospital.Name[nrow(mySubset)]
}
} else if(class(num) == "numeric"){
## subset the data based on state while removing the NAs
mySubset = subset(data, data[,23]!="Not Available" & data[,7] == state)
##convert Rates from pneumonia column to numeric
mySubset$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia = as.numeric(mySubset$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
## order subset based on rankings and alphabetically
mySubset = mySubset[order(mySubset[,23], mySubset[,2]),]
## select State, Hospital name, rate and rankings
mySubset = mySubset[,c(7,2,23)]
## get the hospital name based on user input
my.hospital.name = mySubset$Hospital.Name[num]
}
}
my.hospital.name
}
rankhospital("tx", "heart failure",4)
rankhospital("md", "heart attack","worst")
rankhospital("mn", "heart attack",5000)
source(C:/Users/Fahad/Documents/R Projects/Coursera/r-programming-coursera/Data/rprog_data_ProgAssignment3-data/rankhospital.R)
source(C:/Users/Fahad/Documents/R Projects/Coursera/r-programming-coursera/Data/rprog_data_ProgAssignment3-data/rankhospital.R)
source(C:\Users/Fahad/Documents/R Projects/Coursera/r-programming-coursera/Data/rprog_data_ProgAssignment3-data/rankhospital.R)
source(C:/Users/Fahad/Documents/R Projects/Coursera/r-programming-coursera/Data/rprog_data_ProgAssignment3-data/rankhospital.R)
source(C:\Users/Fahad/Documents/R Projects/Coursera/r-programming-coursera/Data/rprog_data_ProgAssignment3-data/rankhospital.R)
source("C:\Users/Fahad/Documents/R Projects/Coursera/r-programming-coursera/Data/rprog_data_ProgAssignment3-data/rankhospital.R")
source("C:/Users/Fahad/Documents/R Projects/Coursera/r-programming-coursera/Data/rprog_data_ProgAssignment3-data/rankhospital.R")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
5
submit()
submit()
submit()
rankhospital("TX","heart attack", "hoo")
rankhospital("TX","heart attack", "sab")
rankhospital("TX","heart attack", 1)
rankhospital("TX","heart attack", 4)
rankhospital("TX","heart faliure", 4)
rankhospital("TX","heart failure", 4)
rankhospital("TX","heart attack")
data = read.csv("outcome-of-care-measures.csv", colClasses = "character")
data1 = data[,c(2,7,11,17,23)]
str(data1)
res = data.frame()
data1 = data1[order(data1[,11], data1[,2]),]
data1 = data1[order(data1[,2], data1[,1]),]
View(data1)
data1 = data1[order(as.numeric(data1[,2]), data1[,1]),]
View(data1)
str(data1)
data1 = data[,c(2,7,11,17,23)]
str(data1)
data1 = data1[order(as.numeric(data1[,3]), data1[,1]),]
View(data1)
data1[20]
data1$Hospital.Name[20]
state <- levels(factor(data[["State"]]))
state
state = levels(factor(data$State))
state
data = read.csv("outcome-of-care-measures.csv", colClasses = "character")
##change case to make sure state comes in upper case
outcome = tolower(outcome)
## create a vector of valid outcomes
valid.outcomes = c("heart attack", "heart failure", "pneumonia")
## create a vector of valid rankings
## create a vector of valid outcomes
valid.outcomes = c("heart attack", "heart failure", "pneumonia")
## create a vector of valid rankings
valid.rankings = c("best", "worst")
## Check that if rankings and outcome are valid
if(!(outcome %in% valid.outcomes)){
stop("invalid outcome")
} else
if(!(class(num) == "numeric" | num %in% valid.rankings)){
stop("The ranking can be either a number, best or worst catagory only!")
}
#create a dataframe to return
if (outcome == "heart attack") {
outcome.id <- 11
outcome.name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
}
data = read.csv("outcome-of-care-measures.csv", colClasses = "character")
##change case to make sure state comes in upper case
outcome = tolower("outcome")
## create a vector of valid outcomes
valid.outcomes = c("heart attack", "heart failure", "pneumonia")
## create a vector of valid rankings
valid.rankings = c("best", "worst")
## Check that if rankings and outcome are valid
if(!(outcome %in% valid.outcomes)){
stop("invalid outcome")
} else
if(!(class(num) == "numeric" | num %in% valid.rankings)){
stop("The ranking can be either a number, best or worst catagory only!")
}
if ("heart attack" == "heart attack") {
outcome.id <- 11
outcome.name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
}
column.name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
cdata <- subset(data, State == i, select = c(2,7,outcome.id))
cdata <- subset(data, State == "TX", select = c(2,7,outcome.id))
rankall <- function(outcome, num = "best") {
## Read outcome data
data = read.csv("outcome-of-care-measures.csv", colClasses = "character")
##change case to make sure state comes in upper case
outcome = tolower(outcome)
## create a vector of valid outcomes
valid.outcomes = c("heart attack", "heart failure", "pneumonia")
## create a vector of valid rankings
valid.rankings = c("best", "worst")
## Check that if rankings and outcome are valid
if(!(outcome %in% valid.outcomes)){
stop("invalid outcome")
} else
if(!(class(num) == "numeric" | num %in% valid.rankings)){
stop("The ranking can be either a number, best or worst catagory only!")
}
#create a dataframe to return
res = data.frame()
## check if outcome is "heart attack"
if (outcome == "heart attack") {
outcome.id <- 11
column.name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
}
## check if outcome is "heart failure"
else if (outcome == "heart failure") {
outcome.id <- 17
column.name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
}
## otherwise outcome is "Pneumonia"
else {
outcome.id <- 23
column.name <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
## get state names
state = levels(factor(data$State))
hospital.name = character()
## For each state, find the hospital of the given rank
for (i in state) {
## subset data according to state and select columns according to user input
cdata = subset(data, State == i, select = c(2,7,outcome.id))
##order data based on rankings and name
cdata = cdata[order(as.numeric(cdata[[column.name]]), cdata$Hospital.Name, na.last = NA),]
##now check user input and set the rank
if (num == "best") {
rank = 1
} else if (num == "worst") {
rank = nrow(cdata)
} else {
rank = num
}
## add to hospital.name vector
hospital.name = c(hospital.name, cdata[rank,1])
}
## return the resutls
res = c(hospital.name, state)
}
head(rankall("heart attack", 20),10)
tail(rankall("pneumonia", "worst"),3)
rankall <- function(outcome, num = "best") {
## Return a data frame with the hospital names and the (abbreviated) state name}
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that outcome is valid
if (!outcome %in% c("heart attack", "heart failure", "pneumonia")) stop("invalid outcome")
if (outcome == "heart attack") {
oid <- 11
oname <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
oid <- 17
oname <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else {
oid <- 23
oname <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
state <- levels(factor(data[["State"]]))
hospital <- character()
## For each state, find the hospital of the given rank
for (i in state) {
## Subset 'state' records
cdata <- subset(data, State == i, select = c(2,7,oid))
## sort by 30-day mortality for the specified outcome
cdata <- cdata[order(as.numeric(cdata[[oname]]), cdata[["Hospital.Name"]], na.last = NA),]
if (num == "best") {
rank <- 1
} else if (num == "worst") {
rank <- nrow(cdata)
} else {
rank <- num
}
hospital <- c(hospital, cdata[rank, 1])
}
return(data.frame(hospital, state))
}
tail(rankall("pneumonia", "worst"),3)
head(rankall("heart attack", 20),10)
rankall <- function(outcome, num = "best") {
## Read outcome data
data = read.csv("outcome-of-care-measures.csv", colClasses = "character")
##change case to make sure state comes in upper case
outcome = tolower(outcome)
## create a vector of valid outcomes
valid.outcomes = c("heart attack", "heart failure", "pneumonia")
## create a vector of valid rankings
valid.rankings = c("best", "worst")
## Check that if rankings and outcome are valid
if(!(outcome %in% valid.outcomes)){
stop("invalid outcome")
} else
if(!(class(num) == "numeric" | num %in% valid.rankings)){
stop("The ranking can be either a number, best or worst catagory only!")
}
## check if outcome is "heart attack"
if (outcome == "heart attack") {
outcome.id <- 11
column.name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
}
## check if outcome is "heart failure"
else if (outcome == "heart failure") {
outcome.id <- 17
column.name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
}
## otherwise outcome is "Pneumonia"
else {
outcome.id <- 23
column.name <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
## get state names
state = levels(factor(data$State))
hospital.name = character()
## For each state, find the hospital of the given rank
for (i in state) {
## subset data according to state and select columns according to user input
cdata = subset(data, State == i, select = c(2,7,outcome.id))
##order data based on rankings and name
cdata = cdata[order(as.numeric(cdata[[column.name]]), cdata$Hospital.Name, na.last = NA),]
##now check user input and set the rank
if (num == "best") {
rank = 1
} else if (num == "worst") {
rank = nrow(cdata)
} else {
rank = num
}
## add to hospital.name vector
hospital.name = c(hospital.name, cdata[rank,1])
}
## return the resutls
return(data.frame(hospital.name, state)
}
rankall <- function(outcome, num = "best") {
## Read outcome data
data = read.csv("outcome-of-care-measures.csv", colClasses = "character")
##change case to make sure state comes in upper case
outcome = tolower(outcome)
## create a vector of valid outcomes
valid.outcomes = c("heart attack", "heart failure", "pneumonia")
## create a vector of valid rankings
valid.rankings = c("best", "worst")
## Check that if rankings and outcome are valid
if(!(outcome %in% valid.outcomes)){
stop("invalid outcome")
} else
if(!(class(num) == "numeric" | num %in% valid.rankings)){
stop("The ranking can be either a number, best or worst catagory only!")
}
## check if outcome is "heart attack"
if (outcome == "heart attack") {
outcome.id <- 11
column.name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
}
## check if outcome is "heart failure"
else if (outcome == "heart failure") {
outcome.id <- 17
column.name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
}
## otherwise outcome is "Pneumonia"
else {
outcome.id <- 23
column.name <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
## get state names
state = levels(factor(data$State))
hospital.name = character()
## For each state, find the hospital of the given rank
for (i in state) {
## subset data according to state and select columns according to user input
cdata = subset(data, State == i, select = c(2,7,outcome.id))
##order data based on rankings and name
cdata = cdata[order(as.numeric(cdata[[column.name]]), cdata$Hospital.Name, na.last = NA),]
##now check user input and set the rank
if (num == "best") {
rank = 1
} else if (num == "worst") {
rank = nrow(cdata)
} else {
rank = num
}
## add to hospital.name vector
hospital.name = c(hospital.name, cdata[rank,1])
}
## return the resutls
return(data.frame(hospital.name, state))
}
head(rankall("heart attack", 20),10)
source("rankall.R")
source("rankall.R")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
1
2
source("rankall.R")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
source("rankall.R")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
