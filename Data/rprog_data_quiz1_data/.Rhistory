table(parole$male)
prop.table(table(parole$male))
130/(130+545)
table(parole$male, parole$violator)
prop.table(table(parole$male, parole$violator))
prop.table(table(parole$male, parole$violator),1)
14/(116+14+481+64)
table(parole$male, parole$violator)
14/(64+14)
prop.table(table(parole$male, parole$violator),2)
table(parole$crime, parole$state=="Kentucky")
table(parole$crime, parole$state)
table(parole$crime, parole$state==2)
table(parole$crime, parole$state)
str(parole)
ggplot(parole, aes(x=age)) + geom_histogram()
ggplot(parole, aes(x=age)) + geom_histogram(binwidth=5)
ggplot(parole, aes(x=age)) + geom_histogram(binwidth=2)
ggplot(parole, aes(x=age)) + geom_histogram(binwidth=10)
ggplot(parole, aes(x=age)) + geom_histogram(binwidth=30)
ggplot(parole, aes(x=age)) + geom_histogram(binwidth=50)
ggplot(parole, aes(x=age)) + geom_histogram(binwidth=5)
ggplot(parole, aes(x=age)) + geom_histogram(binwidth=5, color="blue")
ggplot(parole, aes(x=age)) + geom_histogram(color="blue")
ggplot(parole, aes(x=age)) + geom_histogram(binwidth=5, color="blue")
ggplot(parole, aes(x=age)) + geom_histogram(binwidth=5)
ggplot(parole, aes(x=age)) + geom_histogram(binwidth=5, color="blue")
ggplot(parole, aes(x=age)) + geom_histogram(binwidth=5) + facet_grid(male ~ .)
ggplot(parole, aes(x=age)) + geom_histogram(binwidth=5) + facet_grid(. ~ male)
str(parole)
ggplot(parole, aes(x=age, fill=male)) + geom_histogram(binwidth=5)
ggplot(parole, aes(x=age, fill=male)) + geom_histogram(color="black", binwidth=5)
ggplot(parole, aes(x=age, fill=male)) + geom_histogram(color="black", binwidth=5, position="identity", alpha=0.5)
ggplot(parole, aes(x=age, fill=male)) + geom_histogram( binwidth=5, position="identity", alpha=0.5)
str(parole)
ggplot(parole, aes(x=time.served)) + geom_histogram( binwidth=5, position="identity")
ggplot(parole, aes(x=time.served)) + geom_histogram( binwidth=1, position="identity")
ggplot(parole, aes(x=time.served)) + geom_histogram( binwidth=0.5, position="identity")
ggplot(parole, aes(x=time.served)) + geom_histogram( binwidth=1, position="identity")
**ANS:** Between 4 and 5 months
ggplot(parole, aes(x=time.served)) + geom_histogram( binwidth=0.1, position="identity")
ggplot(parole, aes(x=time.served)) + geom_histogram( binwidth=1, position="identity") + facet_grid(time.served ~ crime)
ggplot(parole, aes(x=time.served)) + geom_histogram( binwidth=1) + facet_grid(time.served ~ crime)
ggplot(parole, aes(x=time.served)) + geom_histogram( binwidth=1) + facet_grid(time.served ~ .)
ggplot(parole, aes(x=time.served)) + geom_histogram( binwidth=1) + facet_grid(crime ~ .)
str(parole)
ggplot(parole, aes(x=time.served, fill=crime)) + geom_histogram( binwidth=5, position="identity", alpha=0.5)
edges = read.csv("edges.csv")
users = read.csv("users.csv")
str(users)
str(edges)
summary(edges)
users$id
edges$V1
edges$V2
str(edges)
str(edges)
146^2
146*2
292/59
str(users)
table(users$gender, users$locale)
table(users$gender=="A", users$locale)
table(users$gender, users$locale)
table(users$gender)
install.packages("igraph")
library(igraph)
g = graph.data.frame(edges, FALSE, users)
str(g)
print(g)
print(g, e=TRUE, v=TRUE)
g = graph.data.frame(edges, TRUE, users)
g
g = graph.data.frame(users, TRUE, edges)
g = graph.data.frame(users, FALSE, edges)
g = graph.data.frame(users, TRUE, edges)
g = graph.data.frame(edges, TRUE, users)
g
g = graph.data.frame(edges, FALSE, users)
g
g = graph.data.frame(edges, TRUE, users)
g
g = graph.data.frame(edges, FALSE, users)
plot(g, vertex.size=5, vertex.label = NA)
plot(g, vertex.size=5)
plot(g, vertex.size=5, vertex.label = NA)
degree(g)
table(degree(g))
table(degree(g)>=10)
V(g) = degree(g)/2 + 2
V(g)$size = degree(g)/2 + 2
str(g)
plot(g, vertex.label=NA)
table(g$size)
table(V(g)$size)
table(degree(g))
summary(degree(g))
V(g)$color = "black"
str(g)
V(g)$color[V(g)$gender == "B"] = "grey"
plot(g, vertex.label=NA)
V(g)$color[V(g)$school == "A"] = "yellow"
V(g)$color[V(g)$school == "B"] = "Orange"
plot(g, vertex.label=NA)
V(g)$color[V(g)$school == "A"] = "red"
V(g)$color[V(g)$school == "AB"] = "grey"
plot(g, vertex.label=NA)
V(g)$color = "black"
V(g)$locale
V(g)$school
V(g)$color[V(g)$locale == "A"] = "red"
V(g)$color[V(g)$locale == "B"] = "grey"
plot(g, vertex.label=NA)
?igraph.plotting
plot(g)
plot.igraph(g)
plot(g)
plot.igraph(g)
plot(g)
plot.igraph(g)
plot(g)
plot.igraph(g)
plot(g)
plot(g)
plot(g)
plot.igraph(g)
?igraph.plotting
rglplot(g, vertex.label=NA)
install.packages("rgl")
library(rgl)
rglplot(g, vertex.label=NA)
plot(g, edge.width=2, vertex.label=NA)
tweets = read.csv("tweets.csv")
str(tweets)
tweets[1]
library(plyr)
tweets$Tweet[1]
strwrap(tweets$Tweet[1])
tweets$Avg[1]
library(tm)
corpus = Corpus(VectorSource(tweets$Tweet))
str(corpus)
corpus
strwrap(corpus[[1]])
strwrap(tweets$Tweet[1])
corpus = tm_map(corpus, tolower)
strwrap(corpus[[1]])
corpus = tm_map(corpus, removePunctuation) # remove punctuation
strwrap(corpus[[1]])
corpus = tm_map(corpus, removeWords, stopwords("english"))
strwrap(corpus[[1]])
dtm = DocumentTermMatrix(corpus)
dtm
allTweets = = as.data.frame(as.matrix(dtm))
allTweets = as.data.frame(as.matrix(dtm))
str(allTweets)
install.packages("wordcloud")
library(wordcloud)
str(allTweets)
allTweets
?wordcloud
rownames(allTweets)
colnames(allTweets)
rownames(allTweets)
colnames(allTweets)
str(allTweets)
colSums(allTweets)
rowSums(allTweets)
sum(allTweets)
?wordcloud
wordcloud(colnames(allTweets), colSums(allTweets))
wordcloud(colnames(allTweets), colSums(allTweets), min.freq=3)
wordcloud(colnames(allTweets), colSums(allTweets), random.color=TRUE)
wordcloud(colnames(allTweets), colSums(allTweets), colors="black",ordered.colors=FALSE)
wordcloud(colnames(allTweets), colSums(allTweets), colors="red",ordered.colors=TRUE)
wordcloud(colnames(allTweets), colSums(allTweets), colors="red")
wordcloud(colnames(allTweets), colSums(allTweets), colors="red", scale=c(4,0.5))
wordcloud(colnames(allTweets), colSums(allTweets), colors="red", scale=c(2,0.25))
tweets = read.csv("tweets.csv", stringsAsFactors = FALSE)
str(tweets)
strwrap(tweets$Tweet[1])
tweets$Avg[1]
corpus = Corpus(VectorSource(tweets$Tweet))
corpus
strwrap(corpus[[1]])
corpus = tm_map(corpus, tolower)
strwrap(corpus[[1]])
corpus = tm_map(corpus, removePunctuation)
strwrap(corpus[[1]])
corpus = tm_map(corpus, tolower)
strwrap(corpus[[1]])
corpus = Corpus(VectorSource(tweets$Tweet))
corpus
strwrap(corpus[[1]])
corpus = tm_map(corpus, tolower)
strwrap(corpus[[1]]) # changed to lower case
corpus = tm_map(corpus, removePunctuation) # remove punctuation
strwrap(corpus[[1]])
corpus = tm_map(corpus, removeWords, c("apple", stopwords("english"))) #remove stop words + apple
strwrap(corpus[[1]])
corpus = Corpus(VectorSource(tweets$Tweet))
corpus = tm_map(corpus, tolower)
corpus = tm_map(corpus, removePunctuation) # remove punctuation
corpus = tm_map(corpus, removeWords, stopwords("english"))
strwrap(corpus[[1]])
corpus = tm_map(corpus, removeWords, c("apple", stopwords("english"))) #remove stop words + apple
strwrap(corpus[[1]])
dtm = DocumentTermMatrix(corpus) #document-term matrix out of the corpus
dtm
allTweets = as.data.frame(as.matrix(dtm))
str(allTweets)
wordcloud(colnames(allTweets), colSums(allTweets), colors="red", scale=c(4,0.5))
wordcloud(colnames(allTweets), colSums(allTweets), colors="red", scale=c(2,0.25))
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2,0.25))
?wordcloud
str(allTweets)
tweets$Avg
allTweets$Avg = tweets$Avg
wordcloud(colnames(allTweets), allTweets$Avg <= -1, colors="red", scale=c(4,0.5))
allTweets$Avg <= -1
wordcloud(colnames(allTweets), colSums(allTweets$Avg <= -1), colors="red", scale=c(4,0.5))
negativeTweets = subset(allTweets, tweets$Avg <= -1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets))
wordcloud(colnames(allTweets), colSums(allTweets), colors="red", min.freq=3)
wordcloud(colnames(allTweets), colSums(allTweets), colors="red")
wordcloud(colnames(allTweets), colSums(allTweets), colors="red", random.order=FALSE)
wordcloud(colnames(negativeTweets), colSums(negativeTweets, random.order=F))
wordcloud(colnames(negativeTweets), colSums(negativeTweets, random.order=FALSE))
wordcloud(colnames(negativeTweets), colSums(negativeTweets), random.order=FALSE))
wordcloud(colnames(negativeTweets), colSums(negativeTweets), random.order=FALSE)
wordcloud(colnames(allTweets), colSums(allTweets), random.order=FALSE)
wordcloud(colnames(allTweets), colSums(allTweets), random.order=FALSE, rot.per=50)
wordcloud(colnames(allTweets), colSums(allTweets), random.order=FALSE, rot.per=20)
wordcloud(colnames(allTweets), colSums(allTweets), random.order=FALSE, rot.per=10)
wordcloud(colnames(allTweets), colSums(allTweets), random.order=FALSE, rot.per=1)
wordcloud(colnames(allTweets), colSums(allTweets), random.order=FALSE, rot.per=0)
wordcloud(colnames(allTweets), colSums(allTweets), random.order=FALSE, rot.per=0.5)
wordcloud(colnames(allTweets), colSums(allTweets), random.order=FALSE, rot.per=0.2)
wordcloud(colnames(allTweets), colSums(allTweets), random.order=FALSE, rot.per=.1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), random.order=FALSE, rot.per=.1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), rot.per=.1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), rot.per=.2)
wordcloud(colnames(allTweets), colSums(allTweets), random.order=FALSE, rot.per=.2)
wordcloud(colnames(allTweets), colSums(allTweets), rot.per=.2)
wordcloud(colnames(allTweets), colSums(allTweets), rot.per=.5)
wordcloud(colnames(allTweets), colSums(allTweets), rot.per=.5, ordered.colors=TRUE)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), ordered.colors=TRUE)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), color="red", ordered.colors=TRUE)
wordcloud(colnames(negativeTweets), colSums(negativeTweets), color="red", ordered.colors=TRUE, scale=c(2,0.25))
install.packages("RColorBrewer")
install.packages("RColorBrewer")
library(RColorBrewer)
library(wordcloud)
brewer.pal()
display.brewer.pal()
display.brewer.all()
display.brewer.all()
display.brewer.all()
wordcloud(colnames(negativeTweets), colSums(negativeTweets), colors=brewer.pal(9, "Blues"), ordered.colors=TRUE, scale=c(2,0.25))
wordcloud(colnames(allTweets), colSums(allTweets), colors=brewer.pal(9, "Blues"), rot.per=.5, ordered.colors=TRUE)
wordcloud(colnames(allTweets), colSums(allTweets), colors=brewer.pal(9, "Blues")[c(-5, -6, -7, -8, -9)], rot.per=.5, ordered.colors=TRUE)
wordcloud(colnames(allTweets), colSums(allTweets), colors=brewer.pal(9, "Blues")[c(-1, -2, -3, -4)], rot.per=.5)
wordcloud(colnames(allTweets), colSums(allTweets), colors=brewer.pal(9, "Blues")[c(-5, -6, -7, -8, -9)], rot.per=.5)
wordcloud(colnames(allTweets), colSums(allTweets), colors=brewer.pal(9, "Blues")[c(-5, -6, -7, -8, rot.per=.5)
wordcloud(colnames(allTweets), colSums(allTweets), colors=brewer.pal(9, "Blues"), rot.per=.5)
wordcloud(colnames(allTweets), colSums(allTweets), colors=brewer.pal(9, "Blues"), rot.per=.5)
wordcloud(colnames(allTweets), colSums(allTweets), colors=brewer.pal(9, "Blues")[c(-1, -2, -3, -4)], rot.per=.5)
wordcloud(colnames(allTweets), colSums(allTweets), colors=brewer.pal(9, "Blues")[c(1, 2, 3, 4)], rot.per=.5)
wordcloud(colnames(allTweets), colSums(allTweets), colors=brewer.pal(9, "Blues")[c(5, 6, 7, 8, 9)], rot.per=.5)
wordcloud(colnames(allTweets), colSums(allTweets), colors=brewer.pal(9, "Blues")[c(-5, -6, -7, -8, -9)], rot.per=.5)
wordcloud(colnames(allTweets), colSums(allTweets), colors=brewer.pal(9, "Blues")[c(-1, -2, -3, -4)], rot.per=.5)
wordcloud(colnames(allTweets), colSums(allTweets), colors=brewer.pal(9, "Blues")[c(1, 2, 3, 4)], rot.per=.5)
wordcloud(colnames(allTweets), colSums(allTweets), colors=brewer.pal(9, "Blues")[c(5, 6, 7, 8, 9)], rot.per=.5)
wordcloud(colnames(allTweets), colSums(allTweets), colors=brewer.pal(9, "Blues")[c(-1, -2, -3, -4)], rot.per=.5)
train = read.csv("C:/Users/Fahad/Documents/R Projects/edXCompetition/Data/train.csv")
test = read.csv("C:/Users/Fahad/Documents/R Projects/edXCompetition/Data/test.csv")
library(caTools)
library(rpart)
library(rpart.plot)
library(caret)
split = sample.split(train$Happy, SplitRatio= 0.7)
splitTrain = subset(train, split == TRUE)
splitTest = subset(train, split == FALSE)
distances = dist(splitTrain[3:110], method="euclidean")
clusterHappiness = hclust(distances, method="ward.D")
plot(clus)
plot(clusterHappiness)
clusterGroups = cutree(clusterHappiness, k = 6)
tapply(splitTrain$Income, clusterGroups, mean)
clusterGroups
splitTrain$Income
str(splitTrain)
tapply(splitTrain$Q99982, clusterGroups, mean)
splitTrain$Income
str(splitTrain)
rect.hclust(clusterHappiness, k=6, border="red")
rect.hclust(clusterHappiness, k=7, border="red")
clusterGroups = cutree(clusterHappiness, k = 7)
rect.hclust(clusterHappiness, k=7, border="red")
clusterGroups
tapply(splitTrain, clusterGroups, mean)
tapply(splitTrain[3:110], clusterGroups, mean)
train_new = train
train_new$Age = 2014 - train_new$YOB
train_new$Age
summary(train_new$YOB)
summary(train_new$Age)
train_new$Gender.empty = as.integer(train_new$Gender == "")
summary(train_new$Gender.empty)
table(train_new$Gender)
table(train_new$Gender.empty)
train_new$Gender.female = as.integer(train_new$Gender == "Female")
train_new$Gender.male = as.integer(train_new$Gender == "Male")
table(train_new$Gender)
table(train_new$Gender.empty)
table(train_new$Gender.female)
table(train_new$Gender.male)
train_new$Gender.empty = as.integer(train_new$Gender == "" & train_new$Gender != "Male" & train_new$Gender != "Female")
table(train_new$Gender)
table(train_new$Gender.empty)
table(train_new$Gender.male)
table(train_new$Gender.female)
train_new = train_new[train_new$Gender != ""]
table(train_new$Gender)
train_new = train_new[train_new$Gender != ""]
train_new$Gender = train_new[train_new$Gender != ""]
table(train_new$Gender)
install.packages("gdata")
library(gdata)
train = read.csv("C:/Users/Fahad/Documents/R Projects/edXCompetition/Data/train.csv", stringsAsFactors=FALSE)
test = read.csv("C:/Users/Fahad/Documents/R Projects/edXCompetition/Data/test.csv", stringsAsFactors=FALSE)
train.with.NAs = train
test.with.NAs = test
str(train.with.NAs)
train.with.NAs[train.with.NAs == ""] = NA
test.with.NAs[test.with.NAs == ""] = NA
str(train.with.NAs)
str(test.with.NAs)
train.with.NAs[,grep(pattern="^Q1",colnames(train.with.NAs))] = lapply(train.with.NAs[,grep(pattern="^Q1",colnames(train.with.NAs))],as.factor)
train.with.NAs[,grep(pattern="^Q9",colnames(train.with.NAs))] = lapply(train.with.NAs[,grep(pattern="^Q9",colnames(train.with.NAs))],as.factor)
test.with.NAs[,grep(pattern="^Q9",colnames(test.with.NAs))] = lapply(test.with.NAs[,grep(pattern="^Q9",colnames(test.with.NAs))],as.factor)
test.with.NAs[,grep(pattern="^Q1",colnames(test.with.NAs))] = lapply(test.with.NAs[,grep(pattern="^Q1",colnames(test.with.NAs))],as.factor)
train.with.NAs$Gender = as.factor(train.with.NAs$Gender)
test.with.NAs$Gender = as.factor(test.with.NAs$Gender)
train.with.NAs$Income = as.factor(train.with.NAs$Income)
test.with.NAs$Income = as.factor(test.with.NAs$Income)
train.with.NAs$HouseholdStatus = as.factor(train.with.NAs$HouseholdStatus)
test.with.NAs$HouseholdStatus = as.factor(test.with.NAs$HouseholdStatus)
train.with.NAs$EducationLevel = as.factor(train.with.NAs$EducationLevel)
test.with.NAs$EducationLevel = as.factor(test.with.NAs$EducationLevel)
train.with.NAs$Party = as.factor(train.with.NAs$Party)
test.with.NAs$Party = as.factor(test.with.NAs$Party)
str(train.with.NAs)
str(test.with.NAs)
train.with.NAs$Age = 2014 - train.with.NAs$YOB
test.with.NAs$Age = 2014 - test.with.NAs$YOB
class(train.with.NAs$YOB)
class(train.with.NAs$Age)
train.with.NAs$Age = as.integer(train.with.NAs$Age)
test.with.NAs$Age = as.integer(test.with.NAs$Age)
class(train.with.NAs$Age)
summary(train.with.NAs)
summary(test.with.NAs)
library(mice)
imputed_train = read.csv("imputed.csv")
imputed_test = read.csv("imputedtest.csv")
str(imputed_test)
summary(imputed_test)
str(imputed_train)
summary(imputed_train)
library(caTools)
class(imputed_train$Happy)
imputed_train$Happy = as.factor(imputed_train$Happy)
split = sample.split(imputed_train$Happy, SplitRatio= 0.7)
splitTrain = subset(imputed_train, split == TRUE)
splitTest = subset(imputed_train, split == FALSE)
table(splitTrain$Happy)
1823/(1410+1823)
logRegModel = glm(Happy ~. -UserID -YOB - Q96024 -Q100562 - Q99480 -Q118117 -Q119851 -Q109244 -Q123464 - Q124122 -Q112478 -Q113583 -Q112270 -Q111580 -Q100010 -Q118892 -Q114961 -Q115611 -Q120978 -Q120472 -Q115899 -Q119650 -Q106993 -Q105840 - Q105655 -Q99716 -Q102089 -Q118232 -Q108855 -Q114517 -Q122770 -Q98059 -Q106042 -Q115602 -Q112512 -Q115777 -Q116448 -Q116797 -Q114152 -Q120379 -Q120650 -Q113181 -Q111848 -Q116601 -Q106388 -Q98197 -Q98578 -Q113992 -Q108754 -Q117186, data=splitTrain, family=binomial)
summary(logRegModel)
logRegPred = predict(logRegModel, newdata=splitTest, type="response")
table(splitTest$Happy, logRegPred >0.5)
(323+605)/nrow(splitTest)
class(splitTrain$Happy)
HappinessForest = randomForest(Happy ~ . -UserID -YOB, data=splitTrain)
library(randomForest)
HappinessForest = randomForest(Happy ~ . -UserID -YOB, data=splitTrain)
print(HappinessForest)
PredictForest = predict(HappinessForest, newdata=splitTest)
table(splitTest$Happy, PredictForest)
(295+635)/nrow(splitTest)
HappinessForest2 = randomForest(Happy ~ . -UserID -YOB - Q96024 -Q100562 - Q99480 -Q118117 -Q119851 -Q109244 -Q123464 - Q124122 -Q112478 -Q113583 -Q112270 -Q111580 -Q100010 -Q118892 -Q114961 -Q115611 -Q120978 -Q120472 -Q115899 -Q119650 -Q106993 -Q105840 - Q105655 -Q99716 -Q102089 -Q118232 -Q108855 -Q114517 -Q122770 -Q98059 -Q106042 -Q115602 -Q112512 -Q115777 -Q116448 -Q116797 -Q114152 -Q120379 -Q120650 -Q113181 -Q111848 -Q116601 -Q106388 -Q98197 -Q98578 -Q113992 -Q108754 -Q117186, data=splitTrain)
print(HappinessForest2)
PredictForest2 = predict(HappinessForest2, newdata=splitTest)
table(splitTest$Happy, PredictForest2)
(298+623)/nrow(splitTest)
class(imputed_train$Happy)
HappinessForestKaggle = randomForest(Happy ~ ., data=imputed_train)
print(HappinessForestKaggle)
PredictForestKaggle = predict(HappinessForestKaggle, newdata=imputed_test, type="prob")
PredictForestKaggle
PredictForestKaggle[,2]
submission = cbind(UserID=imputed_test$UserID, Probability1=PredictForestKaggle[,2])
View(submission)
write.table(submission,file="submission13.csv",sep=",",row.names=F)
library(ggplot2)
library(caTools)
ggplot(train_numeric, aes(x=Happy)) + geom_histogram(binwidth=5, color="blue") + facet_grid( . ~ Gender)
ggplot(imputed_train, aes(x=Happy)) + geom_histogram(binwidth=5, color="blue") + facet_grid( . ~ Gender)
ggplot(imputed_train, aes(x=Happy)) + geom_histogram(binwidth=5, color="blue")
ggplot(imputed_train, aes(x=Happy)) + geom_histogram()
hist(imputed_train$Happy)
imputed_train$Happy = as.integer(imputed_train$Happy)
hist(imputed_train$Happy)
imputed_train$Happy = as.factor(imputed_train$Happy)
hist(imputed_train$Happy)
ggplot(imputed_train, aes(x=Happy)) + geom_histogram(binwidth=5, color="blue")
limited.splitTrain = splitTrain
limited.splitTest = splitTest
limited.splitTrain$Happy = NULL
limited.splitTest$Happy = NULL
summary(limited.splitTrain)
str(limited.splitTrain)
km = kmeans(limited.splitTrain, centers=4)
km
km = kmeans(limited.splitTrain, centers=5)
is.na(limited.splitTrain)
summary(limited.splitTrain)
km = kmeans(limited.splitTrain, centers=5)
limited.splitTrain$UserID = NULL
limited.splitTest$UserID = NULL
km = kmeans(limited.splitTrain, 5)
preproc = preProcess(limited.splitTrain)
library(caret)
preproc = preProcess(limited.splitTrain)
str(limited.splitTrain)
installed.packages("swirl")
library(swirl)
installed.packages("swirl")
install.packages("swirl")
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z * 2 + 100
mySqrt<-sqrt(z-1)
mySqrt
myDiv <- z/mySqrt
myDiv
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + v(0,10,100)
c(1,2,3,4) + c(0,10,100)
x = 4
class(x)
x = c(4, TRUE)
class(x)
x = c(1, 3,5)
y = c(3,2,10)
rbind(x,y)
x <- list(2, "a", "b", TRUE)
x[[1]]
x[[2]]
x[1]
class(x[[2]])
class(x[[1]])
x <- 1:4
y <- 2:3
x+y
x
y
x <- c(17, 14, 4, 5, 13, 12, 10)
x
x[x>10] = 4
x
setwd("~/R Projects/Coursera/R Programming/Data/rprog_data_quiz1_data")
quiz1 = read.csv("hw1_data.csv")
str(quiz1)
quiz1[2,]
head(quiz1)
quiz1[1:2,]
tail(quiz1)
quiz1[152:153,]
quiz1$Ozone[47]
summary(quiz1$Ozone)
quiz1subset = subset(quiz1, quiz1$Ozone > 31 & quiz1$Temp > 90)
summary(quiz1subset$Solar.R)
tapply(quiz1, quiz1$Month == 6, mean)
tapply(quiz1$Temp, quiz1$Month == 6, mean)
max(quiz1$Ozone, quiz1$Month == 5)
tapply(quiz1$Ozone, quiz1$Month == 5, max)
tapply(quiz1$Ozone, quiz1$Month == 5, max, na.omit=TRUE)
quiz1subset = (quiz1, quiz1$Month == 5)
quiz1subset = subset(quiz1, quiz1$Month == 5)
max(quiz1subset$Ozone)
quiz1subset$Ozone
max(quiz1subset$Ozone, na.rm=TRUE)
x = c(4, TRUE)
class(x)
x <- c(4, "a", TRUE)
class(x)
x <- c(1,3, 5)
y <- c(3, 2, 10)
cbind(x,y)
x <- list(2, "a", "b", TRUE)
x[[2]]
